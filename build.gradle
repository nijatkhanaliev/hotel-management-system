plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.company'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'org.apache.poi:poi-ooxml:5.4.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    ignoreFailures = true
    toolVersion = '10.12.3'
    configFile = file('config/checkstyle.xml')
    showViolations = true
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

def filteredClasses = fileTree("$buildDir/classes/java/main") {
    include 'com/company/hotelmanagementsystem/controller/**'
    include 'com/company/hotelmanagementsystem/service/**'
    exclude 'com/company/hotelmanagementsystem/mapper/**'
    exclude 'com/company/hotelmanagementsystem/dto/**'
    exclude 'com/company/hotelmanagementsystem/entity/**'
    exclude 'com/company/hotelmanagementsystem/repository/**'
    exclude 'com/company/hotelmanagementsystem/util/**'
    exclude 'com/company/hotelmanagementsystem/config/**'

}


jacocoTestReport {
    dependsOn test
    classDirectories.setFrom(filteredClasses)

    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    classDirectories.setFrom(filteredClasses)

    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
